# Docs:
# https://aka.ms/yaml

trigger:
  batch: true
  branches:
    include:
    - Frontdoor-pipeline-segregation
    
variables:
- group: thomas_vg
  # terraformVersion: 0.12.26
  # agentPool: 'ubuntu-18.04'
  # action:
  

stages:
  - stage: Precheck
    jobs:
      - job: Validate
        pool:
          vmImage: $(agentPool)
        steps:
        - task: Bash@3
          env:
            thisbuild: $(Build.BuildId)
            PAT: $(thomas_pat)
          inputs:
            targetType: 'inline'
            script: | 
              #!/bin/bash
              set -e

              presenter="thomas.thornton@HMCTS.NET"
              organization="hmcts"
              project="CNP"


              echo "This build number is: $thisbuild"

              while [[ $thisbuild -ne $buildrunning ]]
              do
              JSON_DATA=$(curl -u $presenter:$PAT --request GET "https://dev.azure.com/$organization/$project/_apis/build/builds?api-version=5.1&definitions=417" -H "Content-Type: application/json" | jq  '.value[] | .status + (.id|tostring)' | sort -u)

              for value in ${JSON_DATA[@]}; 
              do 

              number=(${value//[!0-9]/})
              text=(${value//[0-9]/})
              textcheck=$(sed -e 's/^"//' -e 's/"$//' <<<"$text")

              if [[ "$textcheck" == "inProgress" ]];  then
              sleep 15
              buildrunning=$number 

              echo "build $number is inProgress"

              fi

              done
              done

              echo "starting this build $thisbuild"

  - stage: GetArtifacts
    dependsOn: Precheck
    jobs:
      - job: Validate
        pool:
          vmImage: $(agentPool)
        steps:
        - task: TerraformInstaller@0
          inputs:
            terraformVersion: $(terraformVersion)
        - task: PowerShell@2
          displayName: Run tests
          inputs:
            targetType: 'inline'
            script: |
              Install-Module -Name Pester -MaximumVersion 4.99.99 -Force -Verbose -Scope CurrentUser
              Invoke-Pester ./ci -OutputFormat NUnitXml -OutputFile ./TEST-CI.xml -EnableExit
            pwsh: true
        - task: PublishTestResults@2
          displayName: 'Publish Test Results **/TEST-*.xml'
          inputs:
            testResultsFormat: NUnit
            failTaskOnFailedTests: true
          condition: always()

      # - template: pipeline-templates/terraform-plan.yaml
      #   parameters:
      #     environment: 'sbox'
      #     component: 'global'
      #     service_connection: 'dcd-cftapps-sbox'
      #     storage_account_rg: 'core-infra-sbox-rg'
      #     storage_account_name: 'cftappssbox'
      #     build: $(Build.BuildNumber)
      #     agentPool: $(agentPool)
      #     terraformVersion: $(terraformVersion)

      # - job: Archive
      #   pool:
      #     vmImage: $(agentPool)
      #   steps:
      #     - task: CopyFiles@2
      #       displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
      #       inputs:
      #         TargetFolder: '$(Build.ArtifactStagingDirectory)'

      #     - task: PublishBuildArtifacts@1
      #       displayName: 'Publish Artifact: drop'

  ## - stage: ApplyGlobalSandbox
  #   dependsOn: GetArtifacts
  #   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  #   jobs:
  #     - template: pipeline-templates/terraform-apply.yaml
  #       parameters:
  #         environment: 'sbox'
  #         component: 'global'
  #         service_connection: 'dcd-cftapps-sbox'
  #         # subscription: 'DCD-CFTAPPS-SBOX'
  #         storage_account_rg: 'core-infra-sbox-rg'
  #         storage_account_name: 'cftappssbox'
  #         build: $(Build.BuildNumber)
  #         agentPool: $(agentPool)
  #         terraformVersion: $(terraformVersion)