# Docs:
# https://aka.ms/yaml
pool: hmcts-agent-pool

trigger:
  batch: true
  branches:
    include:
    - Frontdoor-pipeline-segregation
    
variables:
- group: thomas_vg

stages:
  - stage: Precheck
    jobs:
      - job: Validate
        # pool:
        #   vmImage: $(agentPool)
        steps:
        - task: AzureKeyVault@1
          displayName: 'Retrieve KeyVault Secret for ADO Token'
          inputs:
            ConnectedServiceName: azurerm-sandbox
            keyVaultName: infra-vault-nonprod
            secretsFilter: 'azure-devops-token'
            runAsPreJob: false
        - task: Bash@3
          displayName: 'Check if other builds are inProgress'
          env:
            thisbuild: $(Build.BuildId)
            pipelinedefinition: $(System.DefinitionId)
          inputs:
            targetType: 'inline'
            script: | 
              #!/bin/bash
              set -e
              organization="hmcts"
              project="CNP"

              echo "This is build $thisbuild"
              IFS=$'\n'
              JSON_DATA=($(curl -u :$(azure-devops-token) --request GET "https://dev.azure.com/$organization/$project/_apis/build/builds?api-version=5.1&definitions=$pipelinedefinition" -H "Content-Type: application/json" | jq  '.value[] | .status + (.id|tostring)' | sort -u | grep inProgress))
              buildnumber=(${JSON_DATA//[!0-9]/})


              if [ $thisbuild -eq $buildnumber ] 
              then

              echo "No other builds are in Progress"

              else

              while [[ $thisbuild -ne $buildnumber_inprogress ]]
              do 

              IFS=$'\n'
              JSON_CHECK=($(curl -u :$(azure-devops-token) --request GET "https://dev.azure.com/$organization/$project/_apis/build/builds?api-version=5.1&definitions=$pipelinedefinition" -H "Content-Type: application/json" | jq  '.value[] | .status + (.id|tostring)' | sort -u | grep inProgress))
              buildnumberrunning=(${JSON_CHECK//[!0-9]/})
              echo "Build number: $buildnumberrunning is in progress"

              buildnumber_inprogress=$buildnumberrunning
              sleep 10

              done

              fi
              
              echo "Starting $thisbuild"

  - stage: GetArtifacts
    dependsOn: Precheck
    jobs:
      - job: Validate
        # pool:
        #   vmImage: $(agentPool)
        steps:
        - task: TerraformInstaller@0
          inputs:
            terraformVersion: $(terraformVersion)
        - task: PowerShell@2
          displayName: Run tests
          inputs:
            targetType: 'inline'
            script: |
              Install-Module -Name Pester -MaximumVersion 4.99.99 -Force -Verbose -Scope CurrentUser
              Invoke-Pester ./ci -OutputFormat NUnitXml -OutputFile ./TEST-CI.xml -EnableExit
            pwsh: true
        - task: PublishTestResults@2
          displayName: 'Publish Test Results **/TEST-*.xml'
          inputs:
            testResultsFormat: NUnit
            failTaskOnFailedTests: true
          condition: always()

      - template: pipeline-templates/terraform-plan.yaml
        parameters:
          environment: 'sbox'
          component: 'global'
          service_connection: 'dcd-cftapps-sbox'
          storage_account_rg: 'core-infra-sbox-rg'
          storage_account_name: 'cftappssbox'
          build: $(Build.BuildNumber)
          agentPool: $(agentPool)
          terraformVersion: $(terraformVersion)

      - job: Archive
        # pool:
        #   vmImage: $(agentPool)
        steps:
          - task: CopyFiles@2
            displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
            inputs:
              TargetFolder: '$(Build.ArtifactStagingDirectory)'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifact: drop'

  # - stage: ApplyGlobalSandbox
  #   dependsOn: GetArtifacts
  #   # condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  #   jobs:
  #     - template: pipeline-templates/terraform-apply.yaml
  #       parameters:
  #         environment: 'sbox'
  #         component: 'global'
  #         service_connection: 'dcd-cftapps-sbox'
  #         # subscription: 'DCD-CFTAPPS-SBOX'
  #         storage_account_rg: 'core-infra-sbox-rg'
  #         storage_account_name: 'cftappssbox'
  #         build: $(Build.BuildNumber)
  #         agentPool: $(agentPool)
  #         terraformVersion: $(terraformVersion)