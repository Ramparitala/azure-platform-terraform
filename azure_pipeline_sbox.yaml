# Docs:
# https://aka.ms/yaml

trigger:
  batch: true
  branches:
    include:
    - Frontdoor-pipeline-segregation
    
variables:
- group: SBOX-AKS-Tags
  terraformVersion: 0.12.26
  agentPool: 'ubuntu-18.04'
  action:
  

stages:
  - stage: GetArtifacts
    jobs:
      - job: Validate
        pool:
          vmImage: ${{ variables.agentPool }}
        steps:
        - task: Bash@3
          env:
            thisbuild: $(Build.BuildId)
            PAT: $(thomas_pat)
          inputs:
            targetType: 'inline'
            script: |            
              #!/bin/bash
              set -e

              PRESENTER="thomast@kainos.com"
              ORGANIZATION="hmcts"
              PROJECT="TamOpsTerraform"


              echo "This build number is: $thisbuild"

              while [[ $thisbuild -ne $buildrunning ]]
              do
              JSON_DATA=$(curl -u $presenter:$PAT --request GET "https://dev.azure.com/$organization/$project/_apis/build/builds?api-version=5.1&definitions=44" -H "Content-Type: application/json" | jq  '.value[] | .status + (.id|tostring)' | sort -u) )

              for value in ${JSON_DATA[@]}; 
              do 

              number=(${value//[!0-9]/})
              text=(${value//[0-9]/})
              textcheck=$(sed -e 's/^"//' -e 's/"$//' <<<"$text")

              if [[ "$textcheck" == "inProgress" ]];  then

              buildrunning=$number 

              echo "build $number is inProgress"

              fi

              done
              done

              echo "starting this build $thisbuild"

        # - task: PowerShell@2
        #   inputs:
        #     targetType: 'inline'
        #     script: |
        #       #If this starts failing randomly, It maybe because the token has expired, I have set it to 11/18/2020 at the moment.
        #       $token = "<INSERT PAT TOKEN HERE>"
        #       $organization = "hmcts"
        #       $project = "CNP"

        #       $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $user,$token)))

        #       $ThisBuildDefinitionID = $(System.DefinitionId)
        #       [int]$ThisBuildID = $(Build.BuildId)

        #       $GET_BUILDS_BY_DEFINITION_URL = "https://dev.azure.com/$organization/$project/_apis/build/builds?api-version=5.1&definitions=$ThisBuildDefinitionID"

        #       do
        #       {
        #           $GET_BUILDS_BY_DEFINITION_RESPONSE = ""
        #           try
        #           {
        #             $GET_BUILDS_BY_DEFINITION_RESPONSE = Invoke-RestMethod -Uri $GET_BUILDS_BY_DEFINITION_URL `
        #                                         -Method GET `
        #                                         -ContentType "application/json" `
        #                                         -Headers @{Authorization=("Basic {0}" -f $base64AuthInfo)}
        #           }
        #           catch
        #           {
        #             continue
        #           }

        #           [array]$runningBuilds = $GET_BUILDS_BY_DEFINITION_RESPONSE.value | Where-Object -Property "status" -Value "inProgress" -EQ


        #           [int]$currentRunningBuild = ($runningBuilds | Sort-Object -Property "Id")[0].Id


        #           Write-Host "This Build ID: " $ThisBuildID
        #           Write-Host "Currently Running Build ID: " $currentRunningBuild
        #           Write-Host "Waiting..." 
        #           Write-Output ""
        #           Start-Sleep -Seconds 5
        #       }
        #       while($ThisBuildID -ne $currentRunningBuild)
              
        #       Write-Host "Waiting Complete."
        #       Write-Host "Starting Build: " $ThisBuildID
        #       Start-Sleep -Seconds 5          

        - task: TerraformInstaller@0
          inputs:
            terraformVersion: ${{ variables.terraformVersion }}
        - task: PowerShell@2
          displayName: Run tests
          inputs:
            targetType: 'inline'
            script: |
              Install-Module -Name Pester -MaximumVersion 4.99.99 -Force -Verbose -Scope CurrentUser
              Invoke-Pester ./ci -OutputFormat NUnitXml -OutputFile ./TEST-CI.xml -EnableExit
            pwsh: true
        - task: PublishTestResults@2
          displayName: 'Publish Test Results **/TEST-*.xml'
          inputs:
            testResultsFormat: NUnit
            failTaskOnFailedTests: true
          condition: always()

      - template: pipeline-templates/terraform-plan.yaml
        parameters:
          environment: 'sbox'
          component: 'global'
          service_connection: 'dcd-cftapps-sbox'
          storage_account_rg: 'core-infra-sbox-rg'
          storage_account_name: 'cftappssbox'
          build: $(Build.BuildNumber)
          agentPool: ${{ variables.agentPool }}
          terraformVersion: ${{ variables.terraformVersion }}

      - job: Archive
        pool:
          vmImage: ${{ variables.agentPool }}
        steps:
          - task: CopyFiles@2
            displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
            inputs:
              TargetFolder: '$(Build.ArtifactStagingDirectory)'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifact: drop'

  ## - stage: ApplyGlobalSandbox
  #   dependsOn: GetArtifacts
  #   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  #   jobs:
  #     - template: pipeline-templates/terraform-apply.yaml
  #       parameters:
  #         environment: 'sbox'
  #         component: 'global'
  #         service_connection: 'dcd-cftapps-sbox'
  #         # subscription: 'DCD-CFTAPPS-SBOX'
  #         storage_account_rg: 'core-infra-sbox-rg'
  #         storage_account_name: 'cftappssbox'
  #         build: $(Build.BuildNumber)
  #         agentPool: ${{ variables.agentPool }}
  #         terraformVersion: ${{ variables.terraformVersion }}